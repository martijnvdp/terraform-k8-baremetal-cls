#!/bin/sh
swapoff -a
sudo sed -i '/swap/d' /etc/fstab
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo bash -c 'cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF'
sudo apt-get update
apt-cache policy kubelet | head -n 20 
apt-cache policy docker.io | head -n 20 
VERSION=1.19.1-00
sudo apt-get install docker.io kubelet=$VERSION kubeadm=$VERSION kubectl=$VERSION -y
sudo apt-mark hold docker.io kubelet kubeadm kubectl
sudo systemctl enable kubelet.service
sudo systemctl enable docker.service
sudo bash -c 'cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF'
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo apt install sshpass -y
wget https://docs.projectcalico.org/manifests/calico.yaml
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --kubernetes-version 1.19.1
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
sed -i 's/# - name: CALICO_IPV4POOL_CIDR/- name: CALICO_IPV4POOL_CIDR/g' ./calico.yaml
sed -i 's/#   value: \"192.168.0.0\/16\"/  value: \"192.168.0.0\/16\"/g'   ./calico.yaml
kubectl apply -f calico.yaml
sudo systemctl start kubelet.service
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin
  namespace: default
EOF
# metallb
sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml
sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml
sudo kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - ${loadbalancer_iprange}
EOF
IFS=';' read -ra masternodes <<< "${master_nodes}"
sudo kubeadm token list|sed '/TOKEN/d'| awk '{print $1}' > /home/ubuntu/token.txt
echo "sudo kubeadm join $${masternodes[0]}:6443 --token $(sudo kubeadm token list|sed '/TOKEN/d'| awk '{print $1}' ) --discovery-token-ca-cert-hash sha256:$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')" >> /home/ubuntu/joincls.sh
sudo kubectl describe secret $(sudo kubectl describe serviceaccount admin|grep Tokens:|awk '{print $2}') |grep token:|sed '/admin/g'|sed '/kubernetes/g'|awk '{print $2}' > /home/ubuntu/account-token
IFS=';' read -ra workernodes <<< "${worker_nodes}"
for node in $${workernodes}
do
  sshpass -p ${admin_pass} scp -o "StrictHostKeyChecking no" /home/ubuntu/joincls.sh ${admin_user}@$node:/home/ubuntu/joincls.sh
  sshpass -p ${admin_pass} ssh -o "StrictHostKeyChecking no" ${admin_user}@$node "sudo chmod +x /home/ubuntu/joincls.sh;sudo /home/ubuntu/joincls.sh"
done
echo "token to use with scripts/add-cluster-to-local-config.sh :"
cat /home/ubuntu/account-token